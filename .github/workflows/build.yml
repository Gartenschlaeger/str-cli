name: Build

on:
    push:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Set up Go
              uses: actions/setup-go@v3
              with:
                  go-version: 1.20.2
                  cache: true

            - name: Run tests
              run: go test ./...

            - name: Get Version
              run: |
                  export STR_VERSION=$(grep -o -E '([0-9]+\.){2}[0-9]+' main.go)
                  echo "STR_VERSION=$STR_VERSION" >> $GITHUB_ENV

                  echo "Current Version: $STR_VERSION"

                  if git tag --list | grep -q "v${STR_VERSION}"; then
                    echo "CREATE_RELEASE=false" >> $GITHUB_ENV
                    echo "Tag v${STR_VERSION} already exists. Skip release part."
                  else
                    echo "CREATE_RELEASE=true" >> $GITHUB_ENV
                    echo "Tag v${STR_VERSION} not found."
                  fi

            - name: Build artifacts
              if: env.CREATE_RELEASE == 'true'
              run: |
                  echo "Building for macOS amd64"
                  GOOS=darwin GOARCH=amd64 go build -o dist/darwin-amd64/str
                  zip -j dist/darwin-amd64-${STR_VERSION}.zip dist/darwin-amd64/**

                  echo "Building for macOS arm64"
                  GOOS=darwin GOARCH=arm64 go build -o dist/darwin-arm64/str
                  zip -j dist/darwin-arm64-${STR_VERSION}.zip dist/darwin-arm64/**

                  echo "Building for Linux"
                  GOOS=linux GOARCH=amd64 go build -o dist/linux-amd64/str
                  zip -j dist/linux-amd64-${STR_VERSION}.zip dist/linux-amd64/**

                  echo "Building for Windows"
                  GOOS=windows GOARCH=amd64 go build -o dist/windows-amd64/str.exe
                  zip -j dist/windows-amd64-${STR_VERSION}.zip dist/windows-amd64/**

            - name: Create release
              if: env.CREATE_RELEASE == 'true'
              uses: actions/create-release@v1
              id: create_release
              env:
                  GITHUB_TOKEN: ${{ github.token }}
              with:
                  release_name: Release ${{ env.STR_VERSION }}
                  tag_name: v${{ env.STR_VERSION }}
                  draft: false
                  prerelease: false
                  body: ''

            - name: Upload macOS AMD64 artifact
              if: env.CREATE_RELEASE == 'true'
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ github.token }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./dist/darwin-amd64-${{ env.STR_VERSION }}.zip
                  asset_name: darwin-amd64-${{ env.STR_VERSION }}.zip
                  asset_content_type: application/zip

            - name: Upload macOS ARM64 artifact
              if: env.CREATE_RELEASE == 'true'
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ github.token }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./dist/darwin-arm64-${{ env.STR_VERSION }}.zip
                  asset_name: darwin-arm64-${{ env.STR_VERSION }}.zip
                  asset_content_type: application/zip

            - name: Upload Linux AMD64 artifact
              if: env.CREATE_RELEASE == 'true'
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ github.token }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./dist/linux-amd64-${{ env.STR_VERSION }}.zip
                  asset_name: linux-amd64-${{ env.STR_VERSION }}.zip
                  asset_content_type: application/zip

            - name: Upload Windows AMD64 artifact
              if: env.CREATE_RELEASE == 'true'
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ github.token }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./dist/windows-amd64-${{ env.STR_VERSION }}.zip
                  asset_name: windows-amd64-${{ env.STR_VERSION }}.zip
                  asset_content_type: application/zip
